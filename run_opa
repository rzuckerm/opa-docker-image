#!/usr/bin/env python
import os
import re
import subprocess
import time
import urllib
import sys
from HTMLParser import HTMLParser


def get_server_pids(program_name):
    processes = subprocess.check_output(["ps", "-ef"])
    program_exec = "./" + program_name
    pids = {}
    for line in processes.splitlines():
        items = line.split()
        if "sh " + program_exec in line:
            pids["sh"] = items[1]
        elif "nodejs " + program_exec in line:
            pids["nodejs"] = items[1]

    return pids


def main():
    program_name = sys.argv[1]
    if not os.path.exists(program_name):
        sys.exit(program_name + " not found")

    subprocess.check_call("./" + program_name + " 2>&1 >/dev/null &", shell=True)
    pids = []
    for _ in range(20):
        time.sleep(0.1)
        pids = get_server_pids(program_name)
        if len(pids) >= 2:
            break
    else:
        sys.exit("Server never started")

    argv = sys.argv[2:]
    argc = len(argv)
    params = {"argc": argc}
    params.update({"argv" + str(n + 1): arg for n, arg in enumerate(argv)})
    url = "http://localhost:8080?" + urllib.urlencode(params)
    exc = None
    for _ in range(100):
        time.sleep(0.1)
        try:
            content = urllib.urlopen(url).read()
            match = re.search(r"<pre>(.*)</pre>", content, flags=re.DOTALL)
            if match:
                sys.stdout.write(HTMLParser().unescape(match.group(1)))
                exc = None
                break
        except IOError as e:
            exc = e

    for _ in range(100):
        time.sleep(0.1)
        pids = get_server_pids(program_name)
        if "sh" in pids:
            pid = pids["sh"]
        elif "nodejs" in pids:
            pid = pids["nodejs"]
        else:
            break

        subprocess.call(["kill", pid], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    else:
        sys.exit("Could not stop server")

    if exc:
        sys.exit(str(exc))


if __name__ == "__main__":
    main()
